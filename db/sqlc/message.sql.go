// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (room_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING id, room_id, user_id, content, created_at
`

type CreateMessageParams struct {
	RoomID  sql.NullInt64 `json:"room_id"`
	UserID  sql.NullInt64 `json:"user_id"`
	Content string        `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Messages, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.RoomID, arg.UserID, arg.Content)
	var i Messages
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, room_id, user_id, content, created_at
FROM messages
WHERE room_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID sql.NullInt64) ([]Messages, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Messages{}
	for rows.Next() {
		var i Messages
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
